#!/bin/sh
#############################################################################
##
## Copyright (C) 2010-2011 Nokia Corporation and/or its subsidiary(-ies).
## All rights reserved.
## Contact: Nokia Corporation (ivan.frade@nokia.com)
##
## This file is part of the QtSparql module (not yet part of the Qt Toolkit).
##
## $QT_BEGIN_LICENSE:LGPL$
## GNU Lesser General Public License Usage
## This file may be used under the terms of the GNU Lesser General Public
## License version 2.1 as published by the Free Software Foundation and
## appearing in the file LICENSE.LGPL included in the packaging of this
## file. Please review the following information to ensure the GNU Lesser
## General Public License version 2.1 requirements will be met:
## http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
##
## In addition, as a special exception, Nokia gives you certain additional
## rights. These rights are described in the Nokia Qt LGPL Exception
## version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
##
## GNU General Public License Usage
## Alternatively, this file may be used under the terms of the GNU General
## Public License version 3.0 as published by the Free Software Foundation
## and appearing in the file LICENSE.GPL included in the packaging of this
## file. Please review the following information to ensure the GNU General
## Public License version 3.0 requirements will be met:
## http://www.gnu.org/copyleft/gpl.html.
##
## Other Usage
## Alternatively, this file may be used in accordance with the terms and
## conditions contained in a signed written agreement between you and Nokia.
##
## If you have questions regarding the use of this file, please contact
## Nokia at ivan.frade@nokia.com.
## $QT_END_LICENSE$
##
#############################################################################

#-------------------------------------------------------------------------------
# script initialization
#-------------------------------------------------------------------------------

# the name of this script
relconf=`basename $0`
# the directory of this script is the "source tree"
relpath=`dirname $0`
relpath=`(cd "$relpath"; /bin/pwd)`
# the current directory is the "build tree" or "object tree"
outpath=`/bin/pwd`
# FIXME: full support for "shadow builds" is not yet here
unixtests="$relpath/config.tests/unix"
WHICH="$unixtests/which.test"

if [ -z "$PKG_CONFIG" ]; then
    PKG_CONFIG=`"$WHICH" pkg-config 2>/dev/null`
fi

QMAKE_VARS_FILE=.qmake.vars
:> "$QMAKE_VARS_FILE"

# default flags for SPARQL drivers (can get changed later)
QT_CFLAGS_ENDPOINT=
QT_CFLAGS_TRACKER=
QT_LFLAGS_ODBC="-lodbc"

OPT_VERBOSE=no
OPT_SHADOW=maybe

PERL=`$WHICH perl 2>/dev/null`

QMAKE=`$WHICH qmake 2>/dev/null`

if [ -z "$QMAKE" ] ; then
	QMAKE=`$WHICH qmake-qt4 2>/dev/null`
fi

if [ -z "$QMAKE" ] ; then
	echo
	echo "You need qmake in your PATH to build QSparql."
	echo "Cannot proceed."
	exit 1
fi

export QMAKE

QT_VERSION=`$QMAKE -query QT_VERSION`
if [ -z "$QT_VERSION" ] ; then
	echo
	echo "Cannot proceed without QT_VERSION determined."
	exit 1
fi

# is this a shadow build?
if [ "$OPT_SHADOW" = "maybe" ]; then
    OPT_SHADOW=no
    if [ "$relpath" != "$outpath" ] && [ '!' -f "$outpath/configure" ]; then
        if [ -h "$outpath" ]; then
            [ "$relpath" -ef "$outpath" ] || OPT_SHADOW=yes
        else
            OPT_SHADOW=yes
        fi
    fi
fi

# if the source tree is different from the build tree,
# symlink or copy part of the sources
if [ "$OPT_SHADOW" = "yes" ]; then
    echo "Preparing build tree..."

    if [ -z "$PERL" ]; then
        echo
        echo "You need perl in your PATH to make a shadow build."
        echo "Cannot proceed."
        exit 1
    fi

    [ -d "$outpath/bin" ] || mkdir -p "$outpath/bin"

    # make a syncqt script that can be used in the shadow
    rm -f "$outpath/bin/syncqt"
    if [ -x "$relpath/bin/syncqt" ]; then
        mkdir -p "$outpath/bin"
        echo "#!/bin/sh" >"$outpath/bin/syncqt"
        echo "QTDIR=\"$relpath\"; export QTDIR" >>"$outpath/bin/syncqt"
        echo "perl \"$relpath/bin/syncqt\" -outdir \"$outpath\" \"\$@\"" >>"$outpath/bin/syncqt"
        chmod 755 "$outpath/bin/syncqt"
    fi
fi

# symlink includes
if [ -n "$PERL" ] && [ -x "$relpath/bin/syncqt" ]; then
    SYNCQT_OPTS=
    [ "$CFG_DEV" = "yes" ] && SYNCQT_OPTS="$SYNCQT_OPTS -check-includes"
    if [ "$OPT_SHADOW" = "yes" ]; then
        "$outpath/bin/syncqt" $SYNCQT_OPTS
    elif [ "$CFG_DEV" = "yes" ] || [ ! -d $relpath/include ] || [ -d $relpath/.git ]; then
        QTDIR="$relpath" perl "$outpath/bin/syncqt" $SYNCQT_OPTS
    fi
fi

# find a make command
if [ -z "$MAKE" ]; then
    MAKE=
    for mk in gmake make; do
        if "$WHICH" $mk >/dev/null 2>&1; then
            MAKE=`"$WHICH" $mk`
            break
        fi
    done
    if [ -z "$MAKE" ]; then
        echo >&2 "You don't seem to have 'make' or 'gmake' in your PATH."
        echo >&2 "Cannot proceed."
        exit 1
    fi
    # export MAKE, we need it later in the config.tests
    export MAKE
fi

# read which sparql drivers we have in the source code tree
CFG_SPARQL_AVAILABLE=
if [ -d "$relpath/src/plugins/sparqldrivers" ]; then
  for a in "$relpath/src/plugins/sparqldrivers/"*; do
     if [ -d "$a" ]; then
	 base_a=`basename "$a"`
  	 CFG_SPARQL_AVAILABLE="${CFG_SPARQL_AVAILABLE} ${base_a}"
	 eval "CFG_SPARQL_${base_a}=auto"
     fi
  done
fi

CFG_PREFIX_INSTALL=yes

# initalize variables used for installation
QTSPARQL_INSTALL_PREFIX=
QTSPARQL_INSTALL_DOCS=
QTSPARQL_INSTALL_HEADERS=
QTSPARQL_INSTALL_IMPORTS=
QTSPARQL_INSTALL_PLUGINS=`$QMAKE -query QT_INSTALL_PLUGINS`
QTSPARQL_INSTALL_LIB=
QTSPARQL_INSTALL_LIBS=
QTSPARQL_INSTALL_EXAMPLES=
QTSPARQL_INSTALL_TESTS=
CFG_QTSPARQL_COVERAGE=

case $QT_VERSION in
    # In qt5, QML imports are in the 'qml' directory
    "5."*) QTSPARQL_INSTALL_IMPORTS=`$QMAKE -query QT_INSTALL_QML`;;
    *) QTSPARQL_INSTALL_IMPORTS=`$QMAKE -query QT_INSTALL_IMPORTS`;;
esac

# check how the user wants the SPARQL drivers to be built
# options: 
# -plugin-sparql-<driver>  build as separate plugin
# -qt-sparql-<driver>      build into libqsparql
# -no-sparql-<driver>      don't build

# parse the arguments, setting things to "yes" or "no"
while [ "$#" -gt 0 ]; do
    CURRENT_OPT="$1"
    UNKNOWN_ARG=no
    case "$1" in
    -no-*-*|-plugin-*-*|-qt-*-*)
        VAR=`echo $1 | sed "s,^-[^-]*-\(.*\),\1,"`
        VAL=`echo $1 | sed "s,^-\([^-]*\).*,\1,"`
        ;;

    --enable-coverage)
        CFG_QTSPARQL_COVERAGE=yes
        ;;

    -prefix|-docdir|-headerdir|-importdir|-plugindir|-lib|-libdir|-examplesdir|-testdir)
        VAR=`echo $1 | sed "s,^-\(.*\),\1,"`
        shift
        VAL="$1"
        ;;

    -h|help|--help|-help)
        VAR=`echo $1 | sed "s,^[-]*\(.*\),\1,"`
        VAL=yes
        OPT_HELP=yes
        ;;

    *)
        echo "Unknown option: $1";
        OPT_HELP=yes
        ERROR=yes
        shift
        continue
	;;
    esac

    case "$VAR" in
    prefix)
        QTSPARQL_INSTALL_PREFIX="$VAL"
        ;;

    docdir)
        QTSPARQL_INSTALL_DOCS="$VAL"
        ;;

    headerdir)
        QTSPARQL_INSTALL_HEADERS="$VAL"
        ;;

    importdir)
        QTSPARQL_INSTALL_IMPORTS="$VAL"
        ;;

    plugindir)
        QTSPARQL_INSTALL_PLUGINS="$VAL"
        ;;

    lib)
        QTSPARQL_INSTALL_LIB="$VAL"
        ;;

    libdir)
        QTSPARQL_INSTALL_LIBS="$VAL"
        ;;

    examplesdir)
        QTSPARQL_INSTALL_EXAMPLES="$VAL"
        ;;

    testdir)
        QTSPARQL_INSTALL_TESTS="$VAL"
        ;;

    sparql-*)
        OPT="$VAL"
        VAL=`echo $VAR | sed "s,^[^-]*-\([^-]*\).*,\1,"`
        VAR=`echo $VAR | sed "s,^\([^-]*\).*,\1,"`

        found=no
        for d in $CFG_SPARQL_AVAILABLE; do
            if [ "$VAL" = "$d" ]; then
                found=yes
                break
            fi
        done
        [ "$found" = yes ] || ( echo "driver not available: $VAR"; exit 1 )
        eval "CFG_SPARQL_$VAL=\$OPT"
        ;;
    esac

    shift
done

#overwrite the way the drivers are built if user wants coverage report
if [ "$CFG_QTSPARQL_COVERAGE" = "yes" ]; then
    CFG_SPARQL_endpoint=qt
    CFG_SPARQL_tracker=qt
    CFG_SPARQL_tracker_direct=qt
    echo "Preparing configuration for coverage report..."
fi

# next, emit a usage message if something failed.
if [ "$OPT_HELP" = "yes" ]; then
    cat <<EOF
Usage:  $relconf [-h] [-prefix <dir>]
        [-no-sparql-<driver>] [-sparql-<driver>] [-plugin-sparql-<driver>]

Installation options:

 These are optional, but you may specify install directories.

    -prefix <dir> ...... This will install everything relative to <dir>
                         (default $QTSPARQL_INSTALL_PREFIX)
    -docdir <dir> ...... Documentation will be installed to <dir>
                         (default PREFIX/share/doc)
    -headerdir <dir> ... Headers will be installed to <dir>
                         (default PREFIX/include/QtSparql)
    -importdir <dir> ... QML plugins will be installed to <dir>
                         (default QT_INSTALL_IMPORTS)
    -plugindir <dir> ... Plugins will be installed to <dir>
                         (default QT_PLUGIN_DIR)
    -lib <dir> ......... Library folder will be installed to <dir>
                         (default lib)
    -libdir <dir> ...... Libraries will be installed to <dir>
                         (default PREFIX/lib)
    -examplesdir <dir> . Examples will be installed to <dir>
                         (default QT_EXAMPLES_DIR)
    -testdir <dir> ..... Tests will be installed to <dir>
                         (default PREFIX/lib/qtsparql-tests)
EOF

   [ "x$ERROR" = "xyes" ] && exit 1
   exit 0
fi

#-------------------------------------------------------------------------------
# post process QTSPARQL_* variables
#-------------------------------------------------------------------------------

#prefix
if [ -z "$QTSPARQL_INSTALL_PREFIX" ]; then
    QTSPARQL_INSTALL_PREFIX="/usr/local"
fi
QTSPARQL_INSTALL_PREFIX=`"$relpath/config.tests/unix/makeabs" "$QTSPARQL_INSTALL_PREFIX"`

if [ -z "$QTSPARQL_INSTALL_DOCS" ]; then
    QTSPARQL_INSTALL_DOCS="$QTSPARQL_INSTALL_PREFIX/share/doc"
fi
QTSPARQL_INSTALL_DOCS=`"$relpath/config.tests/unix/makeabs" "$QTSPARQL_INSTALL_DOCS"`

if [ -z "$QTSPARQL_INSTALL_HEADERS" ]; then
    case $QT_VERSION in
        "5."*) QTSPARQL_INSTALL_HEADERS="$QTSPARQL_INSTALL_PREFIX/include/Qt5Sparql";;
        *) QTSPARQL_INSTALL_HEADERS="$QTSPARQL_INSTALL_PREFIX/include/QtSparql";;
    esac
fi
QTSPARQL_INSTALL_HEADERS=`"$relpath/config.tests/unix/makeabs" "$QTSPARQL_INSTALL_HEADERS"`

if [ -n "$QTSPARQL_INSTALL_IMPORTS" ]; then
    QTSPARQL_INSTALL_IMPORTS=`"$relpath/config.tests/unix/makeabs" "$QTSPARQL_INSTALL_IMPORTS"`
fi

if [ -n "$QTSPARQL_INSTALL_PLUGINS" ]; then
    QTSPARQL_INSTALL_PLUGINS=`"$relpath/config.tests/unix/makeabs" "$QTSPARQL_INSTALL_PLUGINS"`
fi

if [ -z "$QTSPARQL_INSTALL_LIB" ]; then
    QTSPARQL_INSTALL_LIB="lib"
fi

if [ -z "$QTSPARQL_INSTALL_LIBS" ]; then
    QTSPARQL_INSTALL_LIBS="$QTSPARQL_INSTALL_PREFIX/$QTSPARQL_INSTALL_LIB"
fi
QTSPARQL_INSTALL_LIBS=`"$relpath/config.tests/unix/makeabs" "$QTSPARQL_INSTALL_LIBS"`

if [ -n "$QTSPARQL_INSTALL_EXAMPLES" ]; then
    QTSPARQL_INSTALL_EXAMPLES=`"$relpath/config.tests/unix/makeabs" "$QTSPARQL_INSTALL_EXAMPLES"`
fi

if [ -z "$QTSPARQL_INSTALL_TESTS" ]; then
    QTSPARQL_INSTALL_TESTS="$QTSPARQL_INSTALL_PREFIX/lib/libqtsparql-tests"
fi
QTSPARQL_INSTALL_TESTS=`"$relpath/config.tests/unix/makeabs" "$QTSPARQL_INSTALL_TESTS"`

# detect which SPARQL drivers we can build
# CFG_SPARQL_driver=plugin -> we'll build the driver as a plugin
# CFG_SPARQL_driver=qt -> we'll embed the driver into QtSparql library
# CFG_SPARQL=no (or empty) -> we don't build that driver at all
for _SPARQLDR in $CFG_SPARQL_AVAILABLE; do
        case $_SPARQLDR in
        tracker)
            if [ "$CFG_SPARQL_tracker" != "no" ]; then
                QT_LFLAGS_TRACKER=
                if [ "$CFG_SPARQL_tracker" = "auto" ]; then
                     CFG_SPARQL_tracker=plugin
                fi
            fi
            ;;

        tracker_direct)
            if [ "$CFG_SPARQL_tracker_direct" != "no" ]; then
                if "$unixtests/compile.test" "$XQMAKESPEC" "$QMAKE_CONFIG" $OPT_VERBOSE "$relpath" "$outpath" config.tests/unix/tracker-sparql "tracker-sparql" $L_FLAGS $I_FLAGS $l_FLAGS $MAC_CONFIG_TEST_COMMANDLINE; then
                    if [ "$CFG_SPARQL_tracker_direct" = "auto" ]; then
                         CFG_SPARQL_tracker_direct=plugin
                    fi
                fi
            fi
            ;;

        endpoint)
            if [ "$CFG_SPARQL_endpoint" != "no" ]; then
                QT_LFLAGS_ENDPOINT=
                if [ "$CFG_SPARQL_endpoint" = "auto" ]; then
                     CFG_SPARQL_endpoint=plugin
                fi
            fi
            ;;

        virtuoso)
            if [ "$CFG_SPARQL_virtuoso" != "no" ]; then
                if [ "$PLATFORM_MAC" != "yes" ] && "$unixtests/compile.test" "$XQMAKESPEC" "$QMAKE_CONFIG" $OPT_VERBOSE "$relpath" "$outpath" config.tests/unix/iodbc "iODBC" $L_FLAGS $I_FLAGS $l_FLAGS $MAC_CONFIG_TEST_COMMANDLINE; then
			        QT_LFLAGS_ODBC="-liodbc"
                    if [ "$CFG_SPARQL_virtuoso" = "auto" ]; then
                        CFG_SPARQL_virtuoso=plugin
                    fi
                else
                    if [ "$CFG_SPARQL_virtuoso" != "auto" ] && [ "$CFG_CONFIGURE_EXIT_ON_ERROR" = "yes" ]; then
                        echo "Virtuoso SPARQL support cannot be enabled due to functionality tests!"
                        echo " Turn on verbose messaging (-v) to $0 to see the final report."
                        echo " If you believe this message is in error you may use the continue"
                        echo " switch (-continue) to $0 to continue."
                        exit 101
                    else
                        CFG_SPARQL_virtuoso=no
                    fi
                fi
            fi
            ;;

        *)
            if [ "$OPT_VERBOSE" = "yes" ]; then
                echo "unknown SPARQL driver: $_SPARQLDR"
            fi
            ;;
        esac
done

# read which drivers were really buildable
for DRIVER in $CFG_SPARQL_AVAILABLE; do
    eval "VAL=\$CFG_SPARQL_$DRIVER"
    case "$VAL" in
    qt)
        ONDRIVER=`echo $DRIVER | tr 'abcdefghijklmnopqrstuvwxyz' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'`
        QCONFIG_FLAGS="$QCONFIG_FLAGS QT_SPARQL_$ONDRIVER"
        SPARQL_DRIVERS="$SPARQL_DRIVERS $DRIVER"
    ;;
    plugin)
        SPARQL_PLUGINS="$SPARQL_PLUGINS $DRIVER"
    ;;
    esac
done

# write that info down for qmake
echo "sparql-drivers =" "$SPARQL_DRIVERS" >> "$QMAKE_VARS_FILE"
echo "sparql-plugins =" "$SPARQL_PLUGINS" >> "$QMAKE_VARS_FILE"

# create the cache file (simplified)
CACHEFILE="$outpath/.qmake.cache"
[ -f "$CACHEFILE.tmp" ] && rm -f "$CACHEFILE.tmp"

# cmdline args
cat "$QMAKE_VARS_FILE" >> "$CACHEFILE.tmp"
rm -f "$QMAKE_VARS_FILE" 2>/dev/null

#-------------------------------------------------------------------------------
# save configuration into .qmake.cache
#-------------------------------------------------------------------------------

cat >>"$CACHEFILE.tmp" <<EOF
QTSPARQL_SOURCE_TREE = \$\$quote($relpath)
QTSPARQL_BUILD_TREE = \$\$quote($outpath)

EOF

if [ -n "$QT_CFLAGS_ENDPOINT" ]; then
    echo "QT_CFLAGS_ENDPOINT   = $QT_CFLAGS_ENDPOINT" >> "$CACHEFILE.tmp"
fi
if [ -n "$QT_CFLAGS_TRACKER" ]; then
    echo "QT_CFLAGS_TRACKER   = $QT_CFLAGS_TRACKER" >> "$CACHEFILE.tmp"
fi
if [ -n "$QT_LFLAGS_ODBC" ]; then
    echo "QT_LFLAGS_ODBC   = $QT_LFLAGS_ODBC" >> "$CACHEFILE.tmp"
fi

echo "QTSPARQL_INSTALL_PREFIX   = $QTSPARQL_INSTALL_PREFIX" >> "$CACHEFILE.tmp"
echo "QTSPARQL_INSTALL_DOCS     = $QTSPARQL_INSTALL_DOCS" >> "$CACHEFILE.tmp"
echo "QTSPARQL_INSTALL_HEADERS  = $QTSPARQL_INSTALL_HEADERS" >> "$CACHEFILE.tmp"
echo "QTSPARQL_INSTALL_IMPORTS  = $QTSPARQL_INSTALL_IMPORTS" >> "$CACHEFILE.tmp"
echo "QTSPARQL_INSTALL_PLUGINS  = $QTSPARQL_INSTALL_PLUGINS" >> "$CACHEFILE.tmp"
echo "QTSPARQL_INSTALL_LIB      = $QTSPARQL_INSTALL_LIB" >> "$CACHEFILE.tmp"
echo "QTSPARQL_INSTALL_LIBS     = $QTSPARQL_INSTALL_LIBS" >> "$CACHEFILE.tmp"
echo "QTSPARQL_INSTALL_EXAMPLES = $QTSPARQL_INSTALL_EXAMPLES" >> "$CACHEFILE.tmp"
echo "QTSPARQL_INSTALL_TESTS    = $QTSPARQL_INSTALL_TESTS" >> "$CACHEFILE.tmp"

# replace .qmake.cache if it differs from the newly created temp file
if cmp -s "$CACHEFILE.tmp" "$CACHEFILE"; then
    rm -f "$CACHEFILE.tmp"
else
    mv -f "$CACHEFILE.tmp" "$CACHEFILE"
fi


# create / copy header files to include/
QTDIR=. bin/syncqt

echo "Finding project files. Please wait..."

"$QMAKE" -prl -r "${relpath}/projects.pro"
if [ -f "${relpath}/projects.pro" ]; then
    mkfile="${outpath}/Makefile"
    [ -f "$mkfile" ] && chmod +w "$mkfile"
    QTDIR="$outpath" "$QMAKE" -spec "$XQMAKESPEC" "${relpath}/projects.pro" -o "$mkfile"
fi

MAKE=`basename "$MAKE"`
echo
echo QtSparql is now configured for building. Just run \'$MAKE\'.
if [ "$relpath" = "$QTSPARQL_INSTALL_PREFIX" ]; then
    echo Once everything is built, QtSparql is installed.
    echo You should not run \'$MAKE install\'.
else
    echo Once everything is built, you must run \'$MAKE install\'.
    echo QtSparql will be installed into $QTSPARQL_INSTALL_PREFIX
fi
if [ "$CFG_QTSPARQL_COVERAGE" = "yes" ]; then
    "$QMAKE" CONFIG+=coverage
    echo "You are ready to generate coverage report. Just run tests (make check) and make coverage"
fi
echo
echo To reconfigure, run \'$MAKE distclean\' and \'configure\'.
echo


